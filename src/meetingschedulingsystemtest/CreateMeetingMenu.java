/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package meetingschedulingsystemtest;

import java.awt.List;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author hozaifa
 */
public class CreateMeetingMenu extends javax.swing.JFrame {



    /**
     * Creates new form CreateMeetingMenu
     */
    public CreateMeetingMenu() {
        initComponents();
        initPersonList();
        initRoomList();
        
    }
    
    MeetingScheduleSystemMainMenu MSSMM = new MeetingScheduleSystemMainMenu();
    
    // obtains the meeting name
    public String getMeetingNameTF(){
        return meetingNameTF.getText();
    }
    
    // gets the hour the user selects
    public String getHours(){
        String hours = meetingTimeHoursCB.getSelectedItem().toString();
        return hours;
    }
    
    public String getRoomNum(){
        return roomList.getSelectedValue();
    }
    
    // initializes the person JList with existing people
    private void initPersonList() {
        String firstName, lastName, person, phoneNumber;
        DefaultListModel data = new DefaultListModel();
        attendeesList.setModel(data);
        // obtains all the people created from the person array and puts it in the person Jlist
        if(!MSSMM.personArray.isEmpty()){
            for(int i=0; i<MSSMM.personArray.size();i++){
                firstName = MSSMM.personArray.get(i).getFirstName();
                lastName = MSSMM.personArray.get(i).getLastName();
                phoneNumber = MSSMM.personArray.get(i).getPhoneNumber();
                person = firstName + " " + lastName + " " + phoneNumber;
                data.add(i,person);
            }
            attendeesList.setModel(data);    
        }
    }
    
    // initalizes the room JList with existing rooms
    private void initRoomList() {
        int roomNumber;
        DefaultListModel data = new DefaultListModel();
        roomList.setModel(data);
        // obtains all the rooms created from the room array and puts it in the rooms Jlist
        if(!MSSMM.roomArray.isEmpty()){
            for(int i=0; i<MSSMM.roomArray.size();i++){
                roomNumber = MSSMM.roomArray.get(i).getRoomNumber();
                data.add(i,Integer.toString(roomNumber));
            }
            roomList.setModel(data); 
        }
    }
  
    //takes in a string which is the a persons first name, last name, and phone number
    public Person toPerson(String person){
        String[] Name = person.split(" ", 3);
        String firstName = Name[0];
        String lastName = Name[1];
        String phoneNumber = Name[2];
        Person newPerson = new Person(firstName,lastName, phoneNumber);
        return newPerson;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        meetingNamePanel = new javax.swing.JPanel();
        meetingNameLabel = new javax.swing.JLabel();
        meetingNameTF = new javax.swing.JTextField();
        meetingTimePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        roomList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        meetingRoomNumberPanel = new javax.swing.JPanel();
        meetingTimeLabel = new javax.swing.JLabel();
        meetingTimeHoursCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        SubmitPanel = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        attendeesList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();

        meetingNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meeting Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 0, 14))); // NOI18N

        meetingNameLabel.setText("Meeting Name:");

        javax.swing.GroupLayout meetingNamePanelLayout = new javax.swing.GroupLayout(meetingNamePanel);
        meetingNamePanel.setLayout(meetingNamePanelLayout);
        meetingNamePanelLayout.setHorizontalGroup(
            meetingNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(meetingNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(meetingNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        meetingNamePanelLayout.setVerticalGroup(
            meetingNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(meetingNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meetingNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(meetingNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        meetingTimePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meeting Room Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 0, 14))); // NOI18N

        roomList.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a room"));
        roomList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        roomList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(roomList);

        jLabel3.setText("Please Select A Room for This Meeting   ");

        javax.swing.GroupLayout meetingTimePanelLayout = new javax.swing.GroupLayout(meetingTimePanel);
        meetingTimePanel.setLayout(meetingTimePanelLayout);
        meetingTimePanelLayout.setHorizontalGroup(
            meetingTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingTimePanelLayout.createSequentialGroup()
                .addGroup(meetingTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(meetingTimePanelLayout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(meetingTimePanelLayout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        meetingTimePanelLayout.setVerticalGroup(
            meetingTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, meetingTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        meetingRoomNumberPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meeting Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 0, 14))); // NOI18N

        meetingTimeLabel.setText("Meeting Time:");

        meetingTimeHoursCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9", "10", "11", "12", "1", "2", "3", "4" }));

        jLabel1.setText("Hour:");

        javax.swing.GroupLayout meetingRoomNumberPanelLayout = new javax.swing.GroupLayout(meetingRoomNumberPanel);
        meetingRoomNumberPanel.setLayout(meetingRoomNumberPanelLayout);
        meetingRoomNumberPanelLayout.setHorizontalGroup(
            meetingRoomNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingRoomNumberPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(meetingTimeLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meetingTimeHoursCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        meetingRoomNumberPanelLayout.setVerticalGroup(
            meetingRoomNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingRoomNumberPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(meetingRoomNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meetingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(meetingTimeHoursCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        SubmitPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Submit", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 0, 14))); // NOI18N

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SubmitPanelLayout = new javax.swing.GroupLayout(SubmitPanel);
        SubmitPanel.setLayout(SubmitPanelLayout);
        SubmitPanelLayout.setHorizontalGroup(
            SubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SubmitPanelLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        SubmitPanelLayout.setVerticalGroup(
            SubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SubmitPanelLayout.createSequentialGroup()
                .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Meeting Attendees", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 0, 14))); // NOI18N

        attendeesList.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Person to Meeting"));
        attendeesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(attendeesList);

        jLabel4.setText("Please Select all the Attendees of the Meeting  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(meetingNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(meetingRoomNumberPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(meetingTimePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(678, Short.MAX_VALUE)
                .addComponent(SubmitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(meetingNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(meetingRoomNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(meetingTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SubmitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String roomNum = getRoomNum();
        String meetingName = getMeetingNameTF();       
        String meetingTime = getHours();
        
        int selectedRoom = roomList.getSelectedIndex();
        
        Validation validation = new Validation();
        boolean validMeetingInput = validation.validateMeetingName(meetingName); // validates the meeting name so that no numbers are entered
        
        
        // validates the meeting name and room so that every meeting is required a name and room number, and makes sure the meeting input is letters only
        if((roomNum == null || roomNum == "" || meetingName == null || meetingName == "" || !validMeetingInput)){
            dispose();
            CreateMeetingMenu createMeetingMenu = new CreateMeetingMenu();
            JOptionPane.showMessageDialog(null, "Please Enter a valid meeting name and select a room!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            createMeetingMenu.setVisible(true);
            return;
        }
        
        ArrayList<Person> peopleInMeeting = new ArrayList<Person>(); // array lists represents the people in the meeting
        CreateMeetingMenu CMM = new CreateMeetingMenu();
        MeetingScheduleSystemMainMenu MSSMM = new MeetingScheduleSystemMainMenu(); 
        int roomNumber = Integer.parseInt(roomNum);
        

        int[] selectedPeople = new int[attendeesList.getSelectedIndices().length]; //array for the selected people on the JLists
        selectedPeople = attendeesList.getSelectedIndices();
        

        // validates so that no person can attend 2 meetings at the same time
        if(!MSSMM.meetingArray.isEmpty()){
            for(int i=0;i<MSSMM.meetingArray.size();i++){
                String currentMeetingTime = MSSMM.meetingArray.get(i).getMeetingTime();
                System.out.printf("Current Meeting Time: %s%n", currentMeetingTime);
                // if any meeting time is the same as the one being booked is what this checks
                if(currentMeetingTime.equals(meetingTime)){
                    for(int j=0;j<MSSMM.meetingArray.get(i).getPersonArraySize();j++){
                        for(int k=0;k<selectedPeople.length;k++){
                            String fullName = MSSMM.meetingArray.get(i).getFullName(j);
                            String personFromList = attendeesList.getModel().getElementAt(selectedPeople[k]);
                            //these people can't not attend the meeting that is being scheduled
                            if(fullName.equals(personFromList)){
                                System.out.printf("Person %s can not attend 2 meetings at the same time!%n", fullName);
                                dispose();
                                JOptionPane.showMessageDialog(null, fullName + " can not attend 2 meetings at the same time!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                                CMM.setVisible(true);
                                peopleInMeeting.removeAll(peopleInMeeting);
                                return;
                            }   
                        }
                    }
                }
                // if none of the meeting times inside the meeting array match 
                else{
                    peopleInMeeting.removeAll(peopleInMeeting);
                    for(int q=0;q<selectedPeople.length;q++){
                    String personFromList = attendeesList.getModel().getElementAt(selectedPeople[q]);    
                    peopleInMeeting.add(toPerson(personFromList));
                    System.err.printf("person from list: %s%n", personFromList);
                    }
                }
            }
        }
        else{
           // if the meeting array isn't initally empty
            for(int i=0;i<selectedPeople.length;i++){
                String personFromList = attendeesList.getModel().getElementAt(selectedPeople[i]);
                peopleInMeeting.add(toPerson(personFromList));
            }
        }
        

        
        //verifies that the room is not already being used at the same time
        if(!MSSMM.meetingArray.isEmpty()){
            for(int i=0;i<MSSMM.meetingArray.size();i++){
                String meetingRoomNumber = Integer.toString(MSSMM.meetingArray.get(i).getRoom().getRoomNumber());
                if(meetingRoomNumber.equals(roomNum)){
                    String thisMeetingTime = MSSMM.meetingArray.get(i).getMeetingTime();
                    if(thisMeetingTime.equals(getHours())){
                        dispose();
                        JOptionPane.showMessageDialog(null, "The room " + roomNum + " can not hold 2 meetings at the same time!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                        CMM.setVisible(true);
                        System.err.printf("People in Meeting length: %d%n", peopleInMeeting.size());
                        
                        return;
                    }
                }
            }
        }
        
        if(!MSSMM.meetingArray.isEmpty()){
            for(int i=0;i<MSSMM.meetingArray.size();i++){
                String meetingNam = Integer.toString(MSSMM.meetingArray.get(i).getRoom().getRoomNumber());
                if(meetingNam.equals(meetingName)){
                    dispose();
                    JOptionPane.showMessageDialog(null, "The meeting name " + meetingName + " is already taken!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    CMM.setVisible(true);
                    
                    return;
                }
            }
        }
        
        Room room = new Room(roomNumber);
        Meeting meeting = new Meeting(meetingName, meetingTime, room, peopleInMeeting);
        
        System.out.printf("Person Array Size: %d%n", MSSMM.personArray.size());
     
        //will not add the meeting to the array until after validation above
        System.err.printf("people in meeting array size: %d%n", peopleInMeeting.size());
        MSSMM.meetingArray.add(meeting);
        
        System.out.println(meeting.toString());
        System.out.println(room.toString());
        System.out.printf("%nMeeting Array Size: %d%n", MSSMM.meetingArray.size());
        System.out.printf("%nMeeting Person Array Size: %d%n%n%n", meeting.getPersonArraySize());
        for(int i=0;i<meeting.getPersonArraySize();i++){
            System.out.printf("Person : %s",meeting.getPersonAtElement(i));
        }
        dispose();    
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateMeetingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateMeetingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateMeetingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateMeetingMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateMeetingMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SubmitPanel;
    private javax.swing.JList<String> attendeesList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel meetingNameLabel;
    private javax.swing.JPanel meetingNamePanel;
    private javax.swing.JTextField meetingNameTF;
    private javax.swing.JPanel meetingRoomNumberPanel;
    private javax.swing.JComboBox<String> meetingTimeHoursCB;
    private javax.swing.JLabel meetingTimeLabel;
    private javax.swing.JPanel meetingTimePanel;
    private javax.swing.JList<String> roomList;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
